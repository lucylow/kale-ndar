version: '3.8'

services:
  # API Server
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://user:pass@db:5432/kalendar
      - REDIS_URL=redis://redis:6379
      - SOROBAN_RPC_URL=${SOROBAN_RPC_URL:-https://soroban-testnet.stellar.org}
      - FACTORY_CONTRACT_ID=${FACTORY_CONTRACT_ID}
      - KALE_TOKEN_CONTRACT_ID=${KALE_TOKEN_CONTRACT_ID}
      - REFLECTOR_CONTRACT_ID=${REFLECTOR_CONTRACT_ID}
      - SERVER_ACCOUNT=${SERVER_ACCOUNT}
      - SERVER_SECRET=${SERVER_SECRET}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:5173}
      - JWT_SECRET=${JWT_SECRET}
      - SESSION_SECRET=${SESSION_SECRET}
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - kale-ndar-network

  # Event Listener Service
  event-listener:
    build: 
      context: .
      dockerfile: Dockerfile.event-listener
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://user:pass@db:5432/kalendar
      - SOROBAN_RPC_URL=${SOROBAN_RPC_URL:-https://soroban-testnet.stellar.org}
      - FACTORY_CONTRACT_ID=${FACTORY_CONTRACT_ID}
      - KALE_TOKEN_CONTRACT_ID=${KALE_TOKEN_CONTRACT_ID}
      - REFLECTOR_CONTRACT_ID=${REFLECTOR_CONTRACT_ID}
    depends_on:
      - db
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - kale-ndar-network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=kalendar
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - kale-ndar-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d kalendar"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - kale-ndar-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - kale-ndar-network

volumes:
  postgres_data:
  redis_data:

networks:
  kale-ndar-network:
    driver: bridge
